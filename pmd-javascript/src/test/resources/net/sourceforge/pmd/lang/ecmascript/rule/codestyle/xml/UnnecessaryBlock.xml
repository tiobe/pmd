<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>Ok, function</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
function foo() {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, if</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
if (true) {
} else if (true) {
} else {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, for</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
for (var i = 0; i < 10; i++) {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, for in</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
for (var i in obj) {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, while</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
while(true) {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, do while</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
do {
} while(true)
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, switch</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
switch(1) {
    case 1:
        break;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Ok, try</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
try {
} catch (e) {
} finally {
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, global</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
{
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, function</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
function foo() {
    {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, if</description>
        <expected-problems>3</expected-problems>
        <code><![CDATA[
if (true) {
    {
    }
} else if (true) {
    {
    }
} else {
    {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, for</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
for (var i = 0; i < 10; i++) {
    {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, for in</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
for (var i in obj) {
    {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, while</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
while(true) {
    {
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, do while</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
do {
    {
    }
} while(true)
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, switch</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
switch(1) {
    case 1:
        {
        }
        break;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Bad, try</description>
        <expected-problems>3</expected-problems>
        <code><![CDATA[
try {
    {
    }
} catch (e) {
    {
    }
} finally {
    {
    }
}
        ]]></code>
    </test-code>
</test-data>
